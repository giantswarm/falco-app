podSecurityPolicy:
  create: true

verticalPodAutoscaler:
  enabled: false

falco:
  image:
    registry: docker.io
    repository: giantswarm/falco
  priorityClassName: giantswarm-critical
  driver:
    kind: ebpf
    loader:
      initContainer:
        image:
          registry: docker.io
          repository: giantswarm/falco-driver-loader
  # ebpf:
  #   enabled: true
  falco:
    grpc:
      enabled: true
    grpc_output:
      enabled: true
    rules_file:
    # adding the rule file list to override the default, because the default does not include plugin rules.
      - /etc/falco/falco_rules.yaml
      - /etc/falco/falco_rules.local.yaml
      - /etc/falco/rules.d
      - /etc/falco/k8s_audit_rules.yaml
    plugins:
      - name: k8saudit
        library_path: libk8saudit.so
        init_config:
        open_params: "/host/audit.log"
        #  Other option is opening a service and add Falco to the k8s_audit sinks.
      - name: json
        library_path: libjson.so
        init_config: ""
    load_plugins: [k8saudit, json]
    # The syscall "plugin"/functionality is enabled be default.
  serviceAccount:
    # We set the service account name only so that we can use it for attaching a PSP.
    name: "falco"
  mounts:
    # Mounts the k8s_audit log file if present (only on api servers)
    volumes:
    - name: auditfile
      hostPath:
        path: /var/log/apiserver/audit.log
    volumeMounts:
    - mountPath: /host/audit.log
      name: auditfile
      readOnly: true


falco-exporter:
  image:
    registry: docker.io
    repository: giantswarm/falco-exporter
  podSecurityPolicy:
    create: true
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

falcosidekick:
  image:
    registry: docker.io
    repository: giantswarm/falcosidekick
