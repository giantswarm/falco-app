podSecurityPolicy:
  create: true

verticalPodAutoscaler:
  enabled: false

falco:
  services:
    # Service where the k8s-api can push the auditlogs to. Settings shown below are default, but added to this file.
    - name: k8saudit-webhook
      type: NodePort
      ports:
        - port: 9765
          nodePort: 30007
          protocol: TCP

  image:
    registry: docker.io
    repository: giantswarm/falco
  priorityClassName: giantswarm-critical
  driver:
    kind: ebpf
    loader:
      initContainer:
        image:
          registry: docker.io
          repository: giantswarm/falco-driver-loader
  # ebpf:
  #   enabled: true
  falco:
    grpc:
      enabled: true
    grpc_output:
      enabled: true
    plugins:
    # Putting plugins in this file because we might have to tweak them in the future.
      - name: k8saudit
        library_path: libk8saudit.so
        init_config:
        # Still have to take a look whether we need to change these, yes or no.
        #   maxEventSize: 262144
        #   webhookMaxBatchSize: 12582912
          sslCertificate: /etc/falco/falco.pem
        open_params: "https://:9765/k8s-audit"
        # Options are [A] We mount api-servers audit log file and read those [B] open a service endpoint which should be an auditsink.
      - name: json
        library_path: libjson.so
        init_config: ""
    load_plugins: [k8saudit, json]
  serviceAccount:
    # We set the service account name only so that we can use it for attaching a PSP.
    name: "falco"

falco-exporter:
  image:
    registry: docker.io
    repository: giantswarm/falco-exporter
  podSecurityPolicy:
    create: true
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

falcosidekick:
  image:
    registry: docker.io
    repository: giantswarm/falcosidekick
