apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ template "falco.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "falco.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  selector:
    matchLabels:
      app: {{ template "falco.fullname" .}}
      role: security
  template:
    metadata:
      name: {{ template "falco.fullname" .}}
      labels:
        app: {{ template "falco.fullname" .}}
        role: security
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/rules: {{ include (print $.Template.BasePath "/configmap-rules.yaml") . | sha256sum }}
        {{- if .Values.falco.certs }}
        checksum/certs: {{ include (print $.Template.BasePath "/secret-certs.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.falco.daemonset.podAnnotations }}
{{ toYaml .Values.falco.daemonset.podAnnotations | indent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "falco.serviceAccountName" .}}
      {{- if (and .Values.falco.ebpf.enabled .Values.falco.ebpf.settings.hostNetwork) }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
{{- if .Values.falco.priorityClassName }}
      priorityClassName: "{{ .Values.falco.priorityClassName }}"
{{- end }}
{{- with .Values.falco.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.falco.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
      tolerations:
{{ toYaml .Values.falco.tolerations | indent 8 }}
{{- if .Values.falco.image.pullSecrets }}
      imagePullSecrets: {{ toYaml .Values.falco.image.pullSecrets | nindent 8 }}
{{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: {{ template "falco.image" . }}
          imagePullPolicy: {{ .Values.falco.image.pullPolicy }}
          resources:
{{ toYaml .Values.falco.resources | indent 12 }}
          securityContext:
            privileged: true
          args:
            - /usr/bin/falco
            {{- if .Values.falco.containerd.enabled }}
            - --cri
            - /run/containerd/containerd.sock
            {{- end }}
            {{- if .Values.falco.kubernetesSupport.enabled }} 
            - -K
            - {{ .Values.falco.kubernetesSupport.apiAuth }} 
            - -k
            - {{ .Values.falco.kubernetesSupport.apiUrl }} 
            {{- end }}
            - -pk
        {{- if .Values.falco.extraArgs }}
{{ toYaml .Values.falco.extraArgs | indent 12 }}
        {{- end }}
          env:
          {{- if .Values.falco.ebpf.enabled }}
            - name: FALCO_BPF_PROBE
              value: {{ .Values.falco.ebpf.path }}
          {{- end }}
          {{- if .Values.falco.proxy.httpProxy }}
            - name: http_proxy
              value: {{ .Values.falco.proxy.httpProxy }}
          {{- end }}
          {{- if .Values.falco.proxy.httpsProxy }}
            - name: https_proxy
              value: {{ .Values.falco.proxy.httpsProxy }}
          {{- end }}
          {{- if .Values.falco.proxy.noProxy }}
            - name: no_proxy
              value: {{ .Values.falco.proxy.noProxy }}
          {{- end }}
          {{- if .Values.falco.timezone }}
            - name: TZ
              value: {{ .Values.falco.timezone }}
          {{- end }}
          {{- range $key, $value := .Values.falco.daemonset.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
          {{- end }}
          volumeMounts:
            {{- if .Values.falco.docker.enabled }}
            - mountPath: /host/var/run/docker.sock
              name: docker-socket
            {{- end}}
            {{- if .Values.falco.containerd.enabled }}
            - mountPath: /host/run/containerd/containerd.sock
              name: containerd-socket
            {{- end}}
            - mountPath: /host/dev
              name: dev-fs
              readOnly: true
            - mountPath: /host/proc
              name: proc-fs
              readOnly: true
            - mountPath: /host/boot
              name: boot-fs
              readOnly: true
            - mountPath: /host/lib/modules
              name: lib-modules
            - mountPath: /host/usr
              name: usr-fs
              readOnly: true
            - mountPath: /host/etc
              name: etc-fs
              readOnly: true
            - mountPath: /etc/falco
              name: config-volume
            {{- if .Values.falco.customRules }}
            - mountPath: /etc/falco/rules.d
              name: rules-volume
            {{- end }}
            {{- if and .Values.falco.falco.grpc.enabled .Values.falco.falco.grpc.unixSocketPath }}
            - mountPath: {{ include "falco.unixSocketDir" . }}
              name: grpc-socket-dir
            {{- end }}
            {{- if or .Values.falco.falco.webserver.sslEnabled (and .Values.falco.falco.grpc.enabled (not .Values.falco.falco.grpc.unixSocketPath)) }}
            - mountPath: /etc/falco/certs
              name: certs-volume
              readOnly: true
            {{- end }}
            {{- if .Values.falco.extraVolumeMounts }}
{{ toYaml .Values.falco.extraVolumeMounts | indent 12 }}
            {{- end }}
      {{- if .Values.falco.extraInitContainers }}
      initContainers:
{{ toYaml .Values.falco.extraInitContainers | indent 12 }}
      {{- end }}
      volumes:
        {{- if .Values.falco.docker.enabled }}
        - name: docker-socket
          hostPath:
            path: {{ .Values.falco.docker.socket }}
        {{- end}}
        {{- if .Values.falco.containerd.enabled }}
        - name: containerd-socket
          hostPath:
            path: {{ .Values.falco.containerd.socket }}
        {{- end}}
        - name: dev-fs
          hostPath:
            path: /dev
        - name: proc-fs
          hostPath:
            path: /proc
        - name: boot-fs
          hostPath:
            path: /boot
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: usr-fs
          hostPath:
            path: /usr
        - name: etc-fs
          hostPath:
            path: /etc
        - name: config-volume
          configMap:
            name: {{ template "falco.fullname" . }}
            items:
              - key: falco.yaml
                path: falco.yaml
              - key: falco_rules.yaml
                path: falco_rules.yaml
              - key: falco_rules.local.yaml
                path: falco_rules.local.yaml
              - key: application_rules.yaml
                path: rules.available/application_rules.yaml
              {{- if .Values.falco.auditLog.enabled }}
              - key: k8s_audit_rules.yaml
                path: k8s_audit_rules.yaml
              {{- end }}
        {{- if .Values.falco.customRules }}
        - name: rules-volume
          configMap:
            name: {{ template "falco.fullname" . }}-rules
        {{- end }}
        {{- if and .Values.falco.falco.grpc.enabled .Values.falco.falco.grpc.unixSocketPath }}
        - name: grpc-socket-dir
          hostPath:
            path: {{ include "falco.unixSocketDir" . }}
        {{- end }}
        {{- if or .Values.falco.falco.webserver.sslEnabled (and .Values.falco.falco.grpc.enabled (not .Values.falco.falco.grpc.unixSocketPath)) }}
        - name: certs-volume
          secret:
            secretName: {{ template "falco.fullname" . }}-certs
            items:
              - key: server.key
                path: server.key
              - key: server.crt
                path: server.crt
              - key: server.pem
                path: server.pem
              - key: ca.crt
                path: ca.crt
        {{- end }}
        {{- if .Values.falco.extraVolumes }}
{{ toYaml .Values.falco.extraVolumes | indent 8 }}
        {{- end }}
  updateStrategy:
{{ toYaml .Values.falco.daemonset.updateStrategy | indent 4 }}
